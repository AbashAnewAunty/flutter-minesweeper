// Mocks generated by Mockito 5.4.1 from annotations
// in minesweeper/test/view_model/game_page_view_model.dart.
// Do not manually edit this file.

// @dart=2.19

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i6;

import 'package:minesweeper/constant.dart' as _i4;
import 'package:minesweeper/manager/prefs_manager.dart' as _i2;
import 'package:minesweeper/repository/game_setting_repository.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePrefsManager_0 extends _i1.SmartFake implements _i2.PrefsManager {
  _FakePrefsManager_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GameSettingRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGameSettingRepository extends _i1.Mock
    implements _i3.GameSettingRepository {
  MockGameSettingRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PrefsManager get prefsManager => (super.noSuchMethod(
        Invocation.getter(#prefsManager),
        returnValue: _FakePrefsManager_0(
          this,
          Invocation.getter(#prefsManager),
        ),
      ) as _i2.PrefsManager);
  @override
  _i4.Difficulty get difficulty => (super.noSuchMethod(
        Invocation.getter(#difficulty),
        returnValue: _i4.Difficulty.easy,
      ) as _i4.Difficulty);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  _i5.Future<void> setDifficulty(_i4.Difficulty? difficulty) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDifficulty,
          [difficulty],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> getDifficulty() => (super.noSuchMethod(
        Invocation.method(
          #getDifficulty,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
